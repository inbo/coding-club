[["index.html", "My first bookdown: read and visualize geese catch data", " My first bookdown: read and visualize geese catch data INBO coding club core team INBO coding club foundation Friends of the INBO coding club 2021-12-17 This document contains a small book/report in a specific bookdown format: the gitbook. Notice that this is the format used to write the documentation of bookdown itself! You can try of course the output format mentioned in BONUS challenge: the html_document2: its very basic and will generate a unique html, while gitbook generates an html per chapter (saved in ./docs as defined in the _bookdown.yml because I prefer to store Rmd and html files neatly separately). The report is divided in several chapters: read, explore and clean geese catch data (chapters 2, 3 and 4) visualize and model the cleaned data (chapters 6 and 7) The chapters are written as separate Rmarkdown documents which are very similar to the original ones written as solutions of Challenge 1 and 2. Main changes: The YAML header is removed from the two Rmd documents as it is replaced by the YAML configuration file, _bookdown.yml and the YAML header of this file, index.Rmd. The packages are loaded only once and it is typically done in this introductory index.Rmd Specific configuration lines about the table of contents (toc: true, toc_depth: 3, etc. ) are removed as a gitbook has its own TOC style, which are actually very nice. Do you want to tune your report? Then choose another output, like bookdown::html_book:, and choose one of the many styles available or import other specific style via css file. On documentation, you can read more about theming and you can play with it if you want. Figure captions added by fig.cap=\"my beautiful caption in the chunk header. Cross-references to figures and sections added via \\@ref(chunkname) or \\@ref(seciton-name-lowercase-dash-instead-of-space). More in cross-references section of bookdown documentation. Notice that not only output html_document2, but also gitbook output allows cross-references, as well. Chunk labels must be unique along the entire book, not only along the R Markdown they belong to. Otherwise error arises: &gt; Duplicate chunk label 'species'; which has been used for the chunk:. To allow you to download all files for this bookdown project via inborutils::setup_codingclub_session(\"my_report_20211216\"), we had to put both data and R Markdown files in the same root folder. However, we really recommend to distinguish them by putting them in two different subfolders of your bookdown project: ./data and ./src. The only Rmd file which needs to stay in root folder is index.Rmd. Load packages. I set warning=FALSE and message=FALSE to this specific chunk of code to not show all warnings and messages you get while loading the packages (see challenge 1): library(tidyverse) # to do datascience library(geepack) # to do modelling library(INBOtheme) # to apply INBO style to graphs library(sf) # to work with geospatial vector data library(leaflet) # to make dynamic maps library(htmltools) # to make nice html labels for dynamic maps library(here) # to work with paths "],["1_geese_read_data_revisited.html", "1 Introduction 2 Read data 3 Explore data 3.1 Taxonomic information 3.2 Geographic information 3.3 Temporal information 4 Preprocess data 4.1 Save cleaned data", " 1 Introduction In this chapter we will: read geese data explore data preprocess data 2 Read data Read catches and counts of geese in Flanders: Set Global Options -&gt; RMarkdown pane -&gt; Evaluate chunks in directory: Project. In this way RMarkdown knows that he has to read paths starting from the root folder, i.e.Â the folder containing coding-club.Rproj. catch_fl &lt;- read_csv( file = &quot;20211216_geese_counts.txt&quot;, na = &quot;NA&quot;, col_types = cols( province = col_character(), location = col_character(), year = col_double(), latinName = col_character(), commonName = col_character(), counts = col_double(), catched = col_double(), adult = col_double(), pulli = col_double(), not_catched = col_double() ) ) If you dont want to change this global option, fine! Then, you can find interesting to work with package here to do the same without changing anything: library(here) # install it first, if not yet done path_catch_file &lt;- here(&quot;20211216_geese_counts.txt&quot;) catch_fl &lt;- read_csv(path_catch_file, na = &quot;NA&quot;, col_types = cols( province = col_character(), location = col_character(), year = col_double(), latinName = col_character(), commonName = col_character(), counts = col_double(), catched = col_double(), adult = col_double(), pulli = col_double(), not_catched = col_double() ) ) The nice thing of using here is that your paths will work always, no matter you run your code manually or you knit it. Number of geese catch data: nrow(catch_fl) ## [1] 8407 Preview: head(catch_fl, n = 10) 3 Explore data 3.1 Taxonomic information Species present: catch_fl %&gt;% distinct(latinName, commonName) 3.2 Geographic information Data are geographically grouped by province and municipality (location): catch_fl %&gt;% distinct(province, location) 3.3 Temporal information The data are temporally defined at year level: years &lt;- catch_fl %&gt;% distinct(year) %&gt;% pull() from: min(years) ## [1] 2009 to: max(years) ## [1] 2018 4 Preprocess data Data not linked to any province or location (NAs) will be removed. Number of rows removed: ## [1] 92 Final dataset: 4.1 Save cleaned data This section is added as part of the solution of challenge 2. By saving the cleaned dataframe at the end of this document we can read it in the second document as input for modelling or plotting. write_csv( x = catch_fl, file = here(&quot;20211216_geese_counts_cleaned.txt&quot;), na = &quot;&quot; ) "],["2_visualize_data_revisited.html", "5 Introduction 6 Static plots 6.1 Catches per province 6.2 Catches per year 6.3 Catches per year and province 6.4 Catch analysis at species level 7 Dynamic maps", " 5 Introduction In this section we will show how number of catches varies by year, province and species. Both static plots and dynamic maps are generated. note: by using bookdown we dont have to read the cleaned data from a file as done in challenge 2! The two R Markdown documents are bound together within the same environment, so the dataframe catch_fl is available in this chapter as well. 6 Static plots 6.1 Catches per province Figure 6.1: Total number of catched geese per province from 2009 to 2018 6.2 Catches per year catch_per_year &lt;- catch_fl %&gt;% group_by(year) %&gt;% summarize(catched_total = sum(catched, na.rm = TRUE)) %&gt;% ungroup() %&gt;% arrange(desc(catched_total)) ggplot( catch_per_year, aes(x = year, y = catched_total) ) + geom_bar(stat = &quot;identity&quot;) + scale_x_continuous(breaks = 2009:2018) Figure 6.2: Annual number of catched geese 6.3 Catches per year and province catch_per_year_province &lt;- catch_fl %&gt;% group_by(year, province) %&gt;% summarize(catched = sum(catched, na.rm = TRUE)) %&gt;% ungroup() %&gt;% arrange(desc(catched)) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. ggplot( catch_per_year_province, aes(x = year, y = catched, fill = province) ) + geom_bar(stat = &quot;identity&quot;) + scale_x_continuous(breaks = 2009:2018) Figure 6.3: Catched geese per year from 2009 to 2018. The color indicates the province where catch occurred. 6.4 Catch analysis at species level 6.4.1 Species selection Before we proceed to analyse the catches at species level, specify the species we are interested to by commonName: species &lt;- c( &quot;Brandgans&quot;, &quot;Canadese gans&quot;, &quot;Grauwe gans&quot;, &quot;Soepgans&quot;, &quot;Nijlgans&quot; ) 6.4.2 Catches per per year and species catch_species &lt;- catch_fl %&gt;% filter(commonName %in% species) %&gt;% group_by(year, commonName) %&gt;% summarize(catched_total = sum(catched, na.rm = TRUE)) %&gt;% arrange(commonName) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. ggplot( catch_species, aes(x = year, y = catched_total, fill = commonName) ) + geom_bar(stat = &quot;identity&quot;) + scale_x_continuous(breaks = 2009:2018) 6.4.3 Data modelling We apply a GEE (generalized estimating equations) model to data from 2010. model_per_species &lt;- map( species, function(s) { dfs &lt;- catch_fl %&gt;% filter(commonName == s &amp; year &gt;= 2010) %&gt;% arrange(location, year) %&gt;% mutate( year = as_factor(as.character(year)), location = as_factor(location) ) geeglm(counts ~ 0 + year, family = poisson, data = dfs, waves = year, id = location ) } ) names(model_per_species) &lt;- species overview_model &lt;- map(model_per_species, ~ summary(.)) overview_gee &lt;- map2_dfr( overview_model, names(overview_model), function(model, name) { coefficients(model)[, 1:2] %&gt;% rownames_to_column(var = &quot;year&quot;) %&gt;% as_tibble() %&gt;% mutate( species = name, year = str_sub(year, start = 5) ) %&gt;% select(species, everything()) } ) overview_gee &lt;- overview_gee %&gt;% mutate( lwr = exp(Estimate - Std.err), upr = exp(Estimate + Std.err), Estimate = exp(Estimate) ) ggplot( overview_gee, aes(x = year, y = Estimate, ymin = lwr, ymax = upr) ) + geom_errorbar(colour = &quot;cyan3&quot;) + geom_point(colour = &quot;cyan4&quot;) + facet_grid(. ~ species) + xlab(&quot;year&quot;) + ylab(&quot;Estimated number of geese per location&quot;) + theme_inbo(14) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 9)) + labs(title = &quot;All provinces&quot;) (#fig:show_model_plots)Modelized catch data for five species from 2010 to 2018. 7 Dynamic maps We make dynamic leaflet maps of total number of catches per province. Note: same data used as in 6.1. pr_fl &lt;- st_read(&quot;20211216_flemish_provinces.gpkg&quot;) ## Reading layer `20211216_flemish_provinces&#39; from data source ## `C:\\Users\\damiano_oldoni\\Documents\\GitHub\\coding-club\\src\\my_report_20211216\\20211216_flemish_provinces.gpkg&#39; ## using driver `GPKG&#39; ## Simple feature collection with 5 features and 8 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 2.545427 ymin: 50.68753 xmax: 5.911116 ymax: 51.50512 ## Geodetic CRS: WGS 84 pr_fl &lt;- pr_fl %&gt;% dplyr::left_join(catch_per_province, by = c(&quot;TX_PROV_DESCR_NL&quot; = &quot;province&quot;) ) bins &lt;- seq(0, 14000, by = 2000) pal &lt;- colorBin(&quot;YlOrRd&quot;, domain = pr_fl$catched_total, bins = bins) labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g catches&quot;, pr_fl$TX_PROV_DESCR_NL, pr_fl$catched_total ) %&gt;% lapply(HTML) map_catch_pr &lt;- leaflet(pr_fl) %&gt;% addTiles() %&gt;% addPolygons( fillColor = ~ pal(catched_total), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7, highlightOptions = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE ), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot; ) ) map_catch_pr Figure 7.1: Map showing the total number of catches per province. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
